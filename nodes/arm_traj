#!/usr/bin/env python
"""
Node causes end effector of arm model to follow a specific trajectory.

PUBLISHERS:
    joint_states (sensor_msgs/JointState): joint info of the two arm joints

PARAMETERS:
    L1: length of arm lower link
    L2: length of arm upper link
    period: amount of time it takes to complete the trajectory
    ~pub_freq: frequency at which to publish the messages
"""

import rospy
from sensor_msgs.msg import JointState
from math import cos, acos, atan2, pi, sqrt
from homework2.utils import traj_2R, IK_2R


class ArmTrajectory:
    """ Causes 2R arm end-effector to follow a straight line trajectory. """
    def __init__(self):
        self.__js_pub = rospy.Publisher('joint_states', JointState,
                                        queue_size=10)
        self.__L1 = rospy.get_param('L1')
        self.__L2 = rospy.get_param('L2')
        self.__period = rospy.get_param('period')
        self.__pub_freq = rospy.get_param('~pub_freq')
        self.__rate = rospy.Rate(self.__pub_freq)
        self.__t = 0

    def loop(self):
        """ Main loop for feeding the arm joint positions. """
        js = JointState()
        js.name = ['lower_joint', 'upper_joint']

        while not rospy.is_shutdown():
            x, y = traj_2R(self.__t, self.__L1, self.__L2, self.__period)
            theta1, theta2 = IK_2R(x, y, self.__L1, self.__L2)

            js.header.stamp = rospy.Time.now()
            js.position = [theta1, theta2]

            self.__js_pub.publish(js)

            self.__t += 1 / self.__pub_freq
            self.__rate.sleep()


def main():
    """ The main() function. """
    rospy.init_node('arm_traj')
    arm_traj = ArmTrajectory()
    arm_traj.loop()


if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
