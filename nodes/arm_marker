#!/usr/bin/env python
"""
Node draws markers at the 2R arm's trajectory in RViz.

PUBLISHERS:
    visualization_marker (visualization_msgs/Marker): contains marker info

PARAMETERS:
    period: amount of time it takes to complete the trajectory
    ~pub_freq: frequency at which to publish the messages
"""

import rospy
import tf2_ros
from visualization_msgs.msg import Marker


class ArmMarker:
    """ Draws markers in RViz at the end-effector position. """
    def __init__(self):
        self.__marker_pub = rospy.Publisher('visualization_marker', Marker,
                                            queue_size=10)
        self.__tf_buffer = tf2_ros.Buffer()
        self.__tf_listener = tf2_ros.TransformListener(self.__tf_buffer)
        self.__period = rospy.get_param('period')
        self.__pub_freq = rospy.get_param('~pub_freq')
        self.__rate = rospy.Rate(self.__pub_freq)

    def loop(self):
        """ Main loop for publishing markers. """
        marker = Marker()

        marker.header.frame_id = 'base_link'
        marker.header.stamp = rospy.Time(0)
        marker.id = 1
        marker.action = Marker.ADD
        marker.scale.x = 0.1
        marker.scale.y = 0.1
        marker.scale.z = 0.1
        marker.lifetime = rospy.Duration(self.__period / 5)

        while not rospy.is_shutdown():
            try:
                trans = self.__tf_buffer.lookup_transform('base_link',
                                                          'end_effector',
                                                          rospy.Time(0))
            except (tf2_ros.LookupException, tf2_ros.ConnectivityException,
                    tf2_ros.ExtrapolationException):
                continue

            marker.id += 1
            marker.pose.position = trans.transform.translation
            marker.pose.orientation = trans.transform.rotation

            if trans.transform.translation.x > 0:
                marker.type = Marker.SPHERE
                marker.color.r = 1
                marker.color.g = 0
                marker.color.b = 1
                marker.color.a = 1
            else:
                marker.type = Marker.CUBE
                marker.color.r = 0
                marker.color.g = 1
                marker.color.b = 1
                marker.color.a = 1

            self.__marker_pub.publish(marker)
            self.__rate.sleep()


def main():
    """ The main() function. """
    rospy.init_node('arm_marker')
    arm_marker = ArmMarker()
    arm_marker.loop()


if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
